// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc/rpc.proto

It has these top-level messages:
	Node
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	Hash    string   `protobuf:"bytes,1,opt,name=Hash" json:"Hash,omitempty"`
	Data    string   `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	Parents []string `protobuf:"bytes,3,rep,name=Parents" json:"Parents,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Node) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Node) GetParents() []string {
	if m != nil {
		return m.Parents
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "Node")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	GetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) GetNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/Rpc/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	GetNode(context.Context, *Node) (*Node, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Rpc/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNode",
			Handler:    _Rpc_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc.proto",
}

func init() { proto.RegisterFile("rpc/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2a, 0x48, 0xd6,
	0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xf2, 0xe0, 0x62, 0xf1, 0xcb, 0x4f,
	0x49, 0x15, 0x12, 0xe2, 0x62, 0xf1, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x02, 0xb3, 0x41, 0x62, 0x2e, 0x89, 0x25, 0x89, 0x12, 0x4c, 0x10, 0x31, 0x10, 0x5b, 0x48, 0x82,
	0x8b, 0x3d, 0x20, 0xb1, 0x28, 0x35, 0xaf, 0xa4, 0x58, 0x82, 0x59, 0x81, 0x59, 0x83, 0x33, 0x08,
	0xc6, 0x35, 0x52, 0xe0, 0x62, 0x0e, 0x2a, 0x48, 0x16, 0x92, 0xe4, 0x62, 0x77, 0x4f, 0x2d, 0x01,
	0x9b, 0xc9, 0xaa, 0x07, 0xa2, 0xa4, 0x20, 0x94, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x4a, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x4f, 0xc3, 0x8e, 0x83, 0x00, 0x00, 0x00,
}
